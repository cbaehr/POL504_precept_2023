#sotu.tokens <- tokens(sotu.sub)
sotu.df <- cbind(as.character(sotu.sub), docvars(sotu.sub)["year"], docvars(sotu.sub)["sotu_type"]) |>
setNames(c("text", "year", "type"))
sotu.split <- split(sotu.sub, as.factor(sotu.df$year))
boot.fre <- function(year) { # accepts df of texts (year-specific)
n <- nrow(year) # number of texts
docnums <- sample(1:n, size=n, replace=T) # sample texts WITH replacement
docs.boot <- year[docnums, "text"]
docnames(docs.boot) <- 1:length(docs.boot) # something you have to do
fre <- textstat_readability(docs.boot, measure = "Flesch") # compute FRE for each
return(mean(fre[,"Flesch"])) # return flesch scores only
}
lapply(sotu.split, boot.fre) # apply to each df of party texts
View(sotu.split)
#sotu.tokens <- tokens(sotu.sub)
sotu.df <- cbind(as.character(sotu.sub), docvars(sotu.sub)["year"], docvars(sotu.sub)["sotu_type"]) |>
setNames(c("text", "year", "type"))
sotu.split <- split(sotu.df, as.factor(sotu.df$year))
boot.fre <- function(year) { # accepts df of texts (year-specific)
n <- nrow(year) # number of texts
docnums <- sample(1:n, size=n, replace=T) # sample texts WITH replacement
docs.boot <- year[docnums, "text"]
docnames(docs.boot) <- 1:length(docs.boot) # something you have to do
fre <- textstat_readability(docs.boot, measure = "Flesch") # compute FRE for each
return(mean(fre[,"Flesch"])) # return flesch scores only
}
lapply(sotu.split, boot.fre) # apply to each df of party texts
#sotu.tokens <- tokens(sotu.sub)
sotu.df <- cbind(as.character(sotu.sub), docvars(sotu.sub)["year"]) |>
setNames(c("text", "year"))
sotu.split <- split(sotu.df, as.factor(sotu.df$year))
boot.fre <- function(year) { # accepts df of texts (year-specific)
n <- nrow(year) # number of texts
docnums <- sample(1:n, size=n, replace=T) # sample texts WITH replacement
docs.boot <- year[docnums, "text"]
docnames(docs.boot) <- 1:length(docs.boot) # something you have to do
fre <- textstat_readability(docs.boot, measure = "Flesch") # compute FRE for each
return(mean(fre[,"Flesch"])) # return flesch scores only
}
lapply(sotu.split, boot.fre) # apply to each df of party texts
docs.boot <- corpus(year[docnums, "text"])
boot.fre <- function(year) { # accepts df of texts (year-specific)
n <- nrow(year) # number of texts
docnums <- sample(1:n, size=n, replace=T) # sample texts WITH replacement
docs.boot <- corpus(year[docnums, "text"])
docnames(docs.boot) <- 1:length(docs.boot) # something you have to do
fre <- textstat_readability(docs.boot, measure = "Flesch") # compute FRE for each
return(mean(fre[,"Flesch"])) # return flesch scores only
}
lapply(sotu.split, boot.fre) # apply to each df of party texts
iter <- 10 # NUMBER OF BOOTSTRAP SAMPLES (usually would want more, >=100)
## for loop to compute as many samples as specified
for(i in 1:iter) {
if(i==1) {boot.means <- list()} # generate new list
# store the results in new element i
boot.means[[i]] <- lapply(budget.lp.df.SPLIT, boot.fre)
print(i)
}
iter <- 10 # NUMBER OF BOOTSTRAP SAMPLES (usually would want more, >=100)
## for loop to compute as many samples as specified
for(i in 1:iter) {
if(i==1) {boot.means <- list()} # generate new list
# store the results in new element i
boot.means[[i]] <- lapply(sotu.split, boot.fre)
print(i)
}
## combine the point estimates to a data frame and compute statistics by party
boot.means.df <- do.call(rbind.data.frame, boot.means)
mean.boot <- apply(boot.means.df, 2, mean)
sd.boot <- apply(boot.means.df, 2, sd)
## create data frame for plot
plot_df <- data.frame(sotu.df$year, mean.boot, sd.boot) |>
setNames(c("year", "mean", "se"))
sotu.df$year
mean.boot
## create data frame for plot
plot_df <- data.frame(sort(unique(sotu.df$year)), mean.boot, sd.boot) |>
setNames(c("year", "mean", "se"))
## confidence intervals
ci90 <- qnorm(0.95)
ci95 <- qnorm(0.975)
## ggplot point estimate + variance
ggplot(plot_df, aes(colour = year)) + # general setup for plot
geom_linerange(aes(x = year,
ymin = mean - se*ci90,
ymax = mean + se*ci90),
lwd = 1, position = position_dodge(width = 1/2)) + # plot 90% interval
geom_pointrange(aes(x = year,
y = mean,
ymin = mean - se*ci95,
ymax = mean + se*ci95),
lwd = 1/2, position = position_dodge(width = 1/2),
shape = 21, fill = "WHITE") + # plot point estimates and 95% interval
coord_flip() + # fancy stuff
theme_bw() + # fancy stuff
xlab("") + ylab("Mean Flesch Score, by Year") + # fancy stuff
theme(legend.position = "none") # fancy stuff
pacman::p_load(corpus, dplyr, ggplot2, gutenbergr, quanteda, quanteda.corpora, quanteda.textstats,
readtext, rperseus, sotu, stringr, stylest, text.alignment)
## ggplot point estimate + variance
ggplot(plot_df, aes(colour = year)) + # general setup for plot
geom_linerange(aes(x = year,
ymin = mean - se*ci90,
ymax = mean + se*ci90),
lwd = 1, position = position_dodge(width = 1/2)) + # plot 90% interval
geom_pointrange(aes(x = year,
y = mean,
ymin = mean - se*ci95,
ymax = mean + se*ci95),
lwd = 1/2, position = position_dodge(width = 1/2),
shape = 21, fill = "WHITE") + # plot point estimates and 95% interval
coord_flip() + # fancy stuff
theme_bw() + # fancy stuff
xlab("") + ylab("Mean Flesch Score, by Year") + # fancy stuff
theme(legend.position = "none") # fancy stuff
flesch_point <- sotu.df$text %>%
textstat_readability(measure = "Flesch") %>%
group_by(sotu.df$year) %>%
summarise(mean_flesch = mean(Flesch)) %>%
setNames(c("year", "mean")) %>%
arrange(as.numeric(year))
cbind(flesch_point, "bs_mean" = plot_df$mean)
# calculate the FRE score and the Dale-Chall score.
fre_and_dc_measures <- textstat_readability(sotu.sub, c("Flesch", "Dale.Chall"))
# compute correlations
readability_cor <- cor(cbind(fre_and_dc_measures$Flesch, fre_and_dc_measures$Dale.Chall))
# print
rownames(readability_cor) <- c("Flesch", "Dale-Chall")
colnames(readability_cor) <- c("Flesch", "Dale-Chall")
readability_cor
docs <- corpus( readtext(paste0("/Users/christianbaehr/Documents/GitHub/pol504_private/homework1/", c("melania", "michelle"), ".txt")) )
# set gap to default (-1)
sw2 <- smith_waterman(as.character(docs)[1], as.character(docs)[2],
type="words", gap=-1)
# increase gap penalty to -5 --> reduces extent of plagiarism. Why?
sw3 <- smith_waterman(as.character(docs)[1], as.character(docs)[2],
type="words", gap=-5)
sw2
sw3
View(sw2)
sw2$sw
sw3$sw
help("textstat_readability")
# calculate the FRE score and the Dale-Chall score.
fre_and_dc_measures <- textstat_readability(sotu.sub, c("Flesch", "FOG"))
View(fre_and_dc_measures)
# calculate the FRE score and the Dale-Chall score.
fre_and_dc_measures <- textstat_readability(sotu.sub, c("Flesch", "FOG"))
# compute correlations
readability_cor <- cor(cbind(fre_and_dc_measures$Flesch, fre_and_dc_measures$FOG))
# print
rownames(readability_cor) <- c("Flesch", "FOG")
colnames(readability_cor) <- c("Flesch", "FOG")
readability_cor
rm(list = ls())
setwd("/Users/christianbaehr/Documents/GitHub/pol504_private/homework1/")
pacman::p_load(corpus, dplyr, ggplot2, gutenbergr, quanteda, quanteda.corpora, quanteda.textstats,
readtext, rperseus, sotu, stringr, stylest, text.alignment)
R.Version()
library(sf)
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties
gsub("\t", "", counties)
counties <- gsub("\t", "", counties)
gsub("<option value=\", "", counties)
)
sdfa
)))
((()))
(
>
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties <- gsub('<option value=\\\\', "", counties)
counties
gsub('<option value=([\\])', "", counties)
counties <- gsub('<option value=', "", counties)
counties
counties <- gsub('option>', "", counties)
counties
gsub('"', '', counties)
gsub('"|<', '', counties)
gsub('"|<|>', '', counties)
gsub('"|<|>|\\d', '', counties)
gsub('"|<|>|\\d|//', '', counties)
gsub('"|<|>|\\d|////', '', counties)
gsub('"|<|>|\\d|///', '', counties)
gsub('"|<|>|\\d|', '', counties)
counties <- gsub('"|<|>|\\d|', '', counties)
counties
counties <- gsub('////', '', counties)
counties
gsub('////', '', counties)
counties <- gsub("([\\])","", counties)
counties
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties <- gsub('option|value|select', "", counties)
counties <- gsub('"|<|>|\\d|=', '', counties)
counties
gsub("([/])","", counties)
gsub("/","", counties)
counties <- trimws(gsub("/","", counties))
counties
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties <- gsub('option|value|select|eded', "", counties)
counties <- gsub('"|<|>|\\d|=', '', counties)
counties <- trimws(gsub("/","", counties))
counties
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties <- gsub('option|value|select|eded', "", counties)
counties <- gsub('"|<|>|\\d|=', '', counties)
counties <- trimws(gsub("/","", counties))
counties
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties <- gsub('option|value|selected', "", counties)
counties <- gsub('"|<|>|\\d|=', '', counties)
counties <- trimws(gsub("/","", counties))
counties
write.table(counties, "/Users/christianbaehr/Desktop/county_names.txt", row.names = F)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
pacman::p_load(quanteda, quanteda.corpora, quanteda.textstats, dplyr, ggplot2, stringr)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
pacman::p_load(quanteda, quanteda.corpora, quanteda.textstats, dplyr, ggplot2, stringr, sotu)
# merge the meta and text dataframes from the sotu package
sotu <- cbind(sotu_meta, sotu_text)
View(sotu)
sotu <- corpus(sotu, text_field = "sotu.text")
View(sotu)
sotu <- corpus(sotu, text_field = "sotu_text")
# merge the meta and text dataframes from the sotu package
sotu <- cbind(sotu_meta, sotu_text)
sotu <- sotu[which(sotu$year %in% 2007:2010), ]
sotu <- corpus(sotu, text_field = "sotu_text")
sotu.corpus <- corpus(sotu, text_field = "sotu_text")
sotu.tokens <- tokens(sotu.corpus)
library(quanteda.corpora)
ukmnfs <- data_corpus_ukmanifestos
test <- corpus_reshape(ukmnfs, to = "sentences")
library(quanteda)
library(quanteda.corpora)
ukmnfs <- data_corpus_ukmanifestos
test <- corpus_reshape(ukmnfs, to = "sentences")
test.colloc_6b <- textstat_collocations(test) %>% filter(collocation == "united kingdom")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
pacman::p_load(quanteda, quanteda.corpora, quanteda.textstats, dplyr, ggplot2,
readtext, stringr, sotu, gutenbergr, stylest, text.alignment)
test.colloc_6b <- textstat_collocations(test) %>% filter(collocation == "united kingdom")
library(quanteda.corpora)
ukmnfs <- data_corpus_ukmanifestos
test <- corpus_reshape(ukmnfs, to = "sentences")
test.colloc_6b <- textstat_collocations(test) %>% filter(collocation == "united kingdom")
test.colloc_6b
test.colloc_6c <- textstat_collocations(test,  min_count=5)
##Lambda
test.colloc_6c_top10_lam <- test.colloc_6c %>% arrange(desc(lambda)) %>% top_n(10)
a <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/Dennis+Schwartz/id.Dennis+Schwartz")
View(a)
a <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/Dennis+Schwartz/id.Dennis+Schwartz")
b <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/Dennis+Schwartz/rating.Dennis+Schwartz")
c <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/Dennis+Schwartz/subj.Dennis+Schwartz")
c <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/Dennis+Schwartz/subj.Dennis+Schwartz")
help("read.table")
c <- scan("/Users/christianbaehr/Downloads/scale_data/scaledata/Dennis+Schwartz/subj.Dennis+Schwartz")
c <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/Dennis+Schwartz/subj.Dennis+Schwartz", sep = "\n")
View(c)
View(c)
a <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/James+Berardinelli/id.James+Berardinelli")
b <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/Dennis+Schwartz/rating.James+Berardinelli")
b <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/James+Berardinelli/rating.James+Berardinelli")
c <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/James+Berardinelli/subj.James+Berardinelli", sep = "\n")
c <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/James+Berardinelli/subj.James+Berardinelli", sep = "\n", quote = "")
View(c)
reviews <- cbind(a, b, c)
View(reviews)
reviews <- cbind(a, b, c) |>
setNames(c("id", "rating", "text"))
b <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/James+Berardinelli/label.4class.James+Berardinelli")
c <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/James+Berardinelli/subj.James+Berardinelli", sep = "\n", quote = "")
reviews <- cbind(a, b, c) |>
setNames(c("id", "rating", "text"))
View(reviews)
table(reviews$rating)
root <- "/Users/christianbaehr/Downloads/scale_data/scaledata/%s/id.%s"
sprintf(root, "James+Berardinelli")
sprintf(root, c("James+Berardinelli", "James+Berardinelli"))
help(sprintf)
sprintf(root, "James+Berardinelli", "James+Berardinelli")
join <- function(name, class) {
a <- read.table(root, class, name, name)
b <- read.table(root, class, name, name)
c <- read.table(root, class, name, name)
reviews <- cbind(a, b, c) |>
setNames(c("id", "rating", "text"))
return(reviews)
}
names <- c("James+Berardinelli")
root <- "/Users/christianbaehr/Downloads/scale_data/scaledata/%s/%s.%s"
join <- function(name) {
a <- read.table(root, name, "id", name)
b <- read.table(root, name, "label", name)
c <- read.table(root, name, "subj", name)
reviews <- cbind(a, b, c) |>
setNames(c("id", "rating", "text"))
return(reviews)
}
names <- c("James+Berardinelli")
lapply(names, join)
root <- "/Users/christianbaehr/Downloads/scale_data/scaledata/%s/%s.%s"
join <- function(name) {
a <- read.table(sprintf(root, name, "id", name))
b <- read.table(sprintf(root, name, "label", name))
c <- read.table(sprintf(root, name, "subj", name))
reviews <- cbind(a, b, c) |>
setNames(c("id", "rating", "text"))
return(reviews)
}
names <- c("James+Berardinelli")
lapply(names, join)
root <- "/Users/christianbaehr/Downloads/scale_data/scaledata/%s/%s.%s"
join <- function(name) {
a <- read.table(sprintf(root, name, "id", name))
b <- read.table(sprintf(root, name, "label.4class", name))
c <- read.table(sprintf(root, name, "subj", name))
reviews <- cbind(a, b, c) |>
setNames(c("id", "rating", "text"))
return(reviews)
}
names <- c("James+Berardinelli")
lapply(names, join)
root <- "/Users/christianbaehr/Downloads/scale_data/scaledata/%s/%s.%s"
join <- function(name) {
a <- read.table(sprintf(root, name, "id", name))
b <- read.table(sprintf(root, name, "label.4class", name))
c <- read.table(sprintf(root, name, "subj", name), sep = "\n", quote = "")
reviews <- cbind(a, b, c) |>
setNames(c("id", "rating", "text"))
return(reviews)
}
names <- c("James+Berardinelli")
lapply(names, join)
root <- "/Users/christianbaehr/Downloads/scale_data/scaledata/%s/%s.%s"
join <- function(name) {
a <- read.table(sprintf(root, name, "id", name))
b <- read.table(sprintf(root, name, "label.4class", name))
c <- read.table(sprintf(root, name, "subj", name), sep = "\n", quote = "")
reviews <- cbind(a, b, c) |>
setNames(c("id", "rating", "text"))
return(reviews)
}
names <- c("James+Berardinelli", "Dennis+Schwartz", "Scott+Renshaw", "Steve+Rhodes")
out <- lapply(names, join)
out <- do.call(rbind, out)
View(out)
table(out$rating)
write.csv(out, "/Users/christianbaehr/Desktop/movie_reviews.csv", row.names = F)
## load packages
pacman::p_load(quanteda, quanteda.corpora, readtext, quanteda.textmodels,
quanteda.textplots, dplyr)
## working directory
setwd("/Users/christianbaehr/Documents/GitHub/POL504_precept_2023/data/")
## package dependencies
pacman::p_load(dplyr, glmnet, quanteda, caret, randomForest, mlbench, pbapply,
plotrix)
generate <- function() {
party <- sample(c("D", "R"), 100, replace=T)
immigration <- rnorm(100, ifelse(party=="D", 0.1, 0.9), 0.3)
trade <- rnorm(100, ifelse(party=="D", 0.4, 0.8), 0.3)
return(data.frame(party, immigration, trade))
}
generate <- function() {
party <- sample(c("D", "R"), 100, replace=T)
immigration <- rnorm(100, ifelse(party=="D", 0.1, 0.9), 0.3)
trade <- rnorm(100, ifelse(party=="D", 0.4, 0.8), 0.3)
return(data.frame(party, immigration, trade))
}
pols <- generate()
View(pols)
plot(pols$immigration, pols$trade, col=ifelse(pols$party=="D", "blue", "red"), pch=16)
set.seed(123)
generate <- function() {
party <- sample(c("D", "R"), 100, replace=T)
immigration <- rnorm(100, ifelse(party=="D", 0.1, 0.9), 0.3)
trade <- rnorm(100, ifelse(party=="D", 0.4, 0.8), 0.3)
return(data.frame(party, immigration, trade))
}
pols <- generate()
plot(pols$immigration, pols$trade, col=ifelse(pols$party=="D", "blue", "red"), pch=16)
## Now, given a new freshman senator, we want to determine which party
## they are in given their position on immigration and trade issues. Predict their
## party by identifying the three senators closest to the freshman, by Euclidean distance.
freshman <- c(0.40, 0.58)
pols$immigration
freshman[1] - pols$immigration
distances <- sqrt( (freshman[1] - pols$immigration)^2 + (freshman[2] - pols$trade)^2 )
distances
sort(distances)
sort(distances)[1:3]
three_smallest <- sort(distances)[1:3]
pols$distances <- sqrt( (freshman[1] - pols$immigration)^2 + (freshman[2] - pols$trade)^2 )
View(pols)
pols[pols$distances %in% three_smallest, ]
freshmen <- data.frame(party=sample(c("D", "R"), 100, replace=T),
immigration=rnorm(100, 0.5, 0.3),
trade=rnorm(100, 0.6, 0.3))
nearest.neighbor <- function(x1, x2, k=3) {
pols$distances <- sqrt( (x1 - pols$immigration)^2 + (x2 - pols$trade)^2 )
k_smallest <- sort(pols$distances)[1:k]
parties <- pols$party[pols$distances %in% k_smallest]
predicted_party <- ifelse(mean(parties=="D")>0.5, "D", "R")
return(predicted_party)
}
nearest.neighbor(freshmen$immigration[1], freshmen$trade[1])
apply(freshmen[, c("immigration", "trade")], MARGIN = 1, FUN = function(x) nearest.neighbor( x[1], x[2]))
results <- apply(freshmen[, c("immigration", "trade")], MARGIN = 1, FUN = function(x) nearest.neighbor( x[1], x[2]))
table(results)
freshmen <- data.frame(party=sample(c("D", "R"), 100, replace=T),
immigration=rnorm(100, 0.5, 0.3),
trade=rnorm(100, 0.6, 0.3))
results <- apply(freshmen[, c("immigration", "trade")], MARGIN = 1, FUN = function(x) nearest.neighbor( x[1], x[2]))
table(results)
plot(pols$immigration, pols$trade, col=ifelse(pols$party=="D", "blue", "red"), pch=16)
k_3 <- apply(freshmen[, c("immigration", "trade")], MARGIN = 1, FUN = function(x) nearest.neighbor( x[1], x[2]))
table(results)
k_3 == freshmen$party
mean(k_3 == freshmen$party)
k <- c(3, 5, 7)
test_k <- function(k) {
k_prediction <- apply(freshmen[, c("immigration", "trade")], MARGIN = 1, FUN = function(x) nearest.neighbor( x[1], x[2], k=k))
correctness <- mean(k_prediction == freshmen$party)
return( mean(correctness) )
}
k.candidates <- c(3, 5, 7)
test_k(k.candidates)
test_k <- function(k) {
k_prediction <- apply(freshmen[, c("immigration", "trade")], MARGIN = 1, FUN = function(x) nearest.neighbor( x[1], x[2], k=k))
correctness <- mean(k_prediction == freshmen$party)
return( correctness )
}
test_k(k.candidates[1])
test_k(k.candidates[2])
sapply(k.candidates, FUN = function(x) test_k(x))
pols$distance <- sqrt((freshman[1] - pols$immigration)^2 + (freshman[2] - pols$trade)^2)
neighbors <- pols[order(pols$distance)[1:3], ]
#rbPal <- colorRampPalette(c('green','yellow','red'))
#Col <- rbPal(10)[as.numeric(cut(pols$distance,breaks = 10))]
#plot(pols$immigration, pols$trade, col=Col, pch=16)
plot(pols$immigration, pols$trade, col=ifelse(pols$party=="D", "blue", "red"), pch=16)
#points(pols$immigration, pols$trade, col="white", pch=16)
points(freshman[1],freshman[2], pch=16)
freshmen <- data.frame(party=sample(c("D", "R"), 100, replace=T),
immigration=rnorm(100, 0.5, 1),
trade=rnorm(100, 0.6, 1))
nearest.neighbor <- function(x1, x2, k=3) {
pols$distances <- sqrt( (x1 - pols$immigration)^2 + (x2 - pols$trade)^2 )
k_smallest <- sort(pols$distances)[1:k]
parties <- pols$party[pols$distances %in% k_smallest]
predicted_party <- ifelse(mean(parties=="D")>0.5, "D", "R")
return(predicted_party)
}
nearest.neighbor(freshmen$immigration[1], freshmen$trade[1])
k_3 <- apply(freshmen[, c("immigration", "trade")], MARGIN = 1, FUN = function(x) nearest.neighbor( x[1], x[2]))
table(results)
mean(k_3 == freshmen$party)
k.candidates <- c(3, 5, 7)
test_k <- function(k) {
k_prediction <- apply(freshmen[, c("immigration", "trade")], MARGIN = 1, FUN = function(x) nearest.neighbor( x[1], x[2], k=k))
correctness <- mean(k_prediction == freshmen$party)
return( correctness )
}
sapply(k.candidates, FUN = function(x) test_k(x))
#test_k(k.candidates[2])
# freshmen <- data.frame(party=sample(c("D", "R"), 100, replace=T),
#                        immigration=rnorm(100, 0.5, 1),
#                        trade=rnorm(100, 0.6, 1))
freshmen <- generate()
nearest.neighbor <- function(x1, x2, k=3) {
pols$distances <- sqrt( (x1 - pols$immigration)^2 + (x2 - pols$trade)^2 )
k_smallest <- sort(pols$distances)[1:k]
parties <- pols$party[pols$distances %in% k_smallest]
predicted_party <- ifelse(mean(parties=="D")>0.5, "D", "R")
return(predicted_party)
}
nearest.neighbor(freshmen$immigration[1], freshmen$trade[1])
k_3 <- apply(freshmen[, c("immigration", "trade")], MARGIN = 1, FUN = function(x) nearest.neighbor( x[1], x[2]))
table(results)
mean(k_3 == freshmen$party)
k.candidates <- c(3, 5, 7)
test_k <- function(k) {
k_prediction <- apply(freshmen[, c("immigration", "trade")], MARGIN = 1, FUN = function(x) nearest.neighbor( x[1], x[2], k=k))
correctness <- mean(k_prediction == freshmen$party)
return( correctness )
}
sapply(k.candidates, FUN = function(x) test_k(x))
#test_k(k.candidates[2])
generate <- function() {
party <- sample(c("D", "R"), 10, replace=T)
immigration <- rnorm(10, ifelse(party=="D", 0.1, 0.9), 0.3)
trade <- rnorm(10, ifelse(party=="D", 0.4, 0.8), 0.3)
return(data.frame(party, immigration, trade))
}
pols <- generate()
plot(pols$immigration, pols$trade, col=ifelse(pols$party=="D", "blue", "red"), pch=16)
