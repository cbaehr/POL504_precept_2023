text <- gsub("`|'", "", text) # remove apostrophes
text <- gsub("[^[:alpha:]]", " ", text) # remove all non-alpha characters
output <- tibble(title = meta$title, author = meta$author, text = text)
}
# run function
novels <- lapply(c(64317, 2489), prepare_dt, removePunct = TRUE) %>% do.call(rbind,.)
# create dfm
dfm <- tokens(novels$text, remove_punct = T) %>%
dfm(tolower = T)
# regression to check if slope is approx -1.0
regression <- lm(log10(topfeatures(dfm, 100)) ~ log10(1:100))
summary(regression)
confint(regression)
# create plot to illustrate zipf's law
plot(log10(1:100), log10(topfeatures(dfm, 100)),
xlab="log10(rank)", ylab="log10(frequency)", main="Top 100 Words")
# create plot to illustrate zipf's law
plot(log(1:100), log(topfeatures(dfm, 100)),
xlab="log(rank)", ylab="log(frequency)", main="Top 100 Words")
abline(regression, col="red")
abline(a = regression$coefficients["(Intercept)"], b = -1, col = "black")
regression <- lm(log(topfeatures(dfm, 100)) ~ log(1:100))
summary(regression)
confint(regression)
# create plot to illustrate zipf's law
plot(log(1:100), log(topfeatures(dfm, 100)),
xlab="log(rank)", ylab="log(frequency)", main="Top 100 Words")
abline(regression, col="red")
abline(a = regression$coefficients["(Intercept)"], b = -1, col = "black")
num_tokens <- sum(rowSums(dfm))
M <- nfeat(dfm)
k <- 44
# solve for b
b <- log(M/k)/log(num_tokens)
b
corpus <- corpus_subset(data_corpus_ukmanifestos, Year %in% c(1945:1955))
corpus
docvars(corpus)
# key words in context
corpus_subset(corpus, party == "Con") %>%
tokens(remove_punct = T) %>%
kwic("nation", window = 5)
# key words in context
corpus_subset(corpus, Party == "Con") %>%
tokens(remove_punct = T) %>%
kwic("nation", window = 5)
corpus_subset(corpus, Party == "Con") %>%
tokens(remove_punct = T) %>%
kwic("churchil", window = 5)
corpus_subset(corpus, Party == "Con") %>%
tokens(remove_punct = T) %>%
kwic("churchil", window = 5)
corpus <- tolower(corpus)
# key words in context
corpus_subset(corpus, Party == "Con") %>%
tokens(remove_punct = T) %>%
kwic("nation", window = 5)
corpus_subset(corpus, Party == "Con") %>%
tokens(remove_punct = T) %>%
kwic("churchil", window = 5)
corpus_subset(corpus, Party == "Con") %>%
tokens(remove_punct = T) %>%
kwic("churchil", window = 5)
corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>%
kwic("nation", window = 5)
corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>%
kwic("churchil", window = 5)
corpus <- corpus_subset(data_corpus_ukmanifestos, Year %in% c(1945:1955))
corpus <- tolower(corpus)
# key words in context
corpus_subset(corpus, Party == "Con") %>%
tokens(remove_punct = T) %>%
kwic("nation", window = 5)
corpus_subset(corpus, Party == "Con") %>%
tokens(remove_punct = T) %>%
kwic("churchil", window = 5)
corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>%
kwic("nation", window = 5)
corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>%
kwic("churchil", window = 5)
corpus <- corpus_subset(data_corpus_ukmanifestos, Year %in% c(1945:1955))
corpus <- tolower(corpus)
# key words in context
corpus_subset(corpus, Party == "Con") %>%
tokens(remove_punct = T) %>%
kwic("nation", window = 5)
corpus_subset(corpus, Party == "Con") %>%
tokens(remove_punct = T) %>%
kwic("churchil", window = 5)
corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>%
kwic("nation", window = 5)
corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>%
kwic("churchil", window = 5)
topfeatures(corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T))
topfeatures(corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>% dfm())
topfeatures(corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>% tokens_remove(stopwords()) %>% dfm())
topfeatures(corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>% tokens_remove(stopwords()) %>% dfm(), 100)
grep("churchil", corpus)
corpus_subset(corpus, Party == "Con") %>%
tokens(remove_punct = T) %>%
kwic("interest", window = 5)
corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>%
kwic("nation", window = 5)
corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>%
kwic("interest", window = 5)
sotu.sub <- sotu[which(sotu$year %in% 1982:2020),]
sotu.tokens <- tokens(sotu.sub)
sotu.sub <- corpus_reshape(sotu.sub, "sentence")
sotu.tokens <- tokens(sotu.sub)
sotu.sub <- data.frame(corpus_reshape(sotu.sub, "sentence"))
View(sotu.sub)
sotu.sub <- corpus_reshape(sotu.sub, "sentence")
sotu.sub <- sotu[which(sotu$year %in% 1982:2020),]
sotu.sub <- corpus_reshape(sotu.sub, "sentence")
docvars(sotu.sub)
#sotu.tokens <- tokens(sotu.sub)
sotu.df <- cbind(as.character(sotu.sub), docvars(sotu.sub["year"])) |>
setNames("text", "year")
#sotu.tokens <- tokens(sotu.sub)
sotu.df <- cbind(as.character(sotu.sub), docvars(sotu.sub["year"])) |>
setNames(c("text", "year"))
docvars(sotu.sub["year"])
#sotu.tokens <- tokens(sotu.sub)
sotu.df <- cbind(as.character(sotu.sub), docvars(sotu.sub)["year"]) |>
setNames(c("text", "year"))
sotu.split <- split(sotu.sub, as.factor(sotu.df$year))
View(sotu.split)
boot.fre <- function(year) { # accepts df of texts (year-specific)
n <- nrow(year) # number of texts
docnums <- sample(1:n, size=n, replace=T) # sample texts WITH replacement
docs.boot <- year[docnums, "text"]
docnames(docs.boot) <- 1:length(docs.boot) # something you have to do
fre <- textstat_readability(docs.boot, measure = "Flesch") # compute FRE for each
return(mean(fre[,"Flesch"])) # return flesch scores only
}
lapply(sotu.split, boot.fre) # apply to each df of party texts
View(sotu.split)
docvars(sotu.sub)
#sotu.tokens <- tokens(sotu.sub)
sotu.df <- cbind(as.character(sotu.sub), docvars(sotu.sub)["year"]) |>
setNames(c("text", "year", "sotu_type"))
#sotu.tokens <- tokens(sotu.sub)
sotu.df <- cbind(as.character(sotu.sub), docvars(sotu.sub)["year"], docvars(sotu.sub)["sotu_type"]) |>
setNames(c("text", "year", "type"))
sotu.split <- split(sotu.sub, as.factor(sotu.df$year))
boot.fre <- function(year) { # accepts df of texts (year-specific)
n <- nrow(year) # number of texts
docnums <- sample(1:n, size=n, replace=T) # sample texts WITH replacement
docs.boot <- year[docnums, "text"]
docnames(docs.boot) <- 1:length(docs.boot) # something you have to do
fre <- textstat_readability(docs.boot, measure = "Flesch") # compute FRE for each
return(mean(fre[,"Flesch"])) # return flesch scores only
}
lapply(sotu.split, boot.fre) # apply to each df of party texts
View(sotu.split)
#sotu.tokens <- tokens(sotu.sub)
sotu.df <- cbind(as.character(sotu.sub), docvars(sotu.sub)["year"], docvars(sotu.sub)["sotu_type"]) |>
setNames(c("text", "year", "type"))
sotu.split <- split(sotu.df, as.factor(sotu.df$year))
boot.fre <- function(year) { # accepts df of texts (year-specific)
n <- nrow(year) # number of texts
docnums <- sample(1:n, size=n, replace=T) # sample texts WITH replacement
docs.boot <- year[docnums, "text"]
docnames(docs.boot) <- 1:length(docs.boot) # something you have to do
fre <- textstat_readability(docs.boot, measure = "Flesch") # compute FRE for each
return(mean(fre[,"Flesch"])) # return flesch scores only
}
lapply(sotu.split, boot.fre) # apply to each df of party texts
#sotu.tokens <- tokens(sotu.sub)
sotu.df <- cbind(as.character(sotu.sub), docvars(sotu.sub)["year"]) |>
setNames(c("text", "year"))
sotu.split <- split(sotu.df, as.factor(sotu.df$year))
boot.fre <- function(year) { # accepts df of texts (year-specific)
n <- nrow(year) # number of texts
docnums <- sample(1:n, size=n, replace=T) # sample texts WITH replacement
docs.boot <- year[docnums, "text"]
docnames(docs.boot) <- 1:length(docs.boot) # something you have to do
fre <- textstat_readability(docs.boot, measure = "Flesch") # compute FRE for each
return(mean(fre[,"Flesch"])) # return flesch scores only
}
lapply(sotu.split, boot.fre) # apply to each df of party texts
docs.boot <- corpus(year[docnums, "text"])
boot.fre <- function(year) { # accepts df of texts (year-specific)
n <- nrow(year) # number of texts
docnums <- sample(1:n, size=n, replace=T) # sample texts WITH replacement
docs.boot <- corpus(year[docnums, "text"])
docnames(docs.boot) <- 1:length(docs.boot) # something you have to do
fre <- textstat_readability(docs.boot, measure = "Flesch") # compute FRE for each
return(mean(fre[,"Flesch"])) # return flesch scores only
}
lapply(sotu.split, boot.fre) # apply to each df of party texts
iter <- 10 # NUMBER OF BOOTSTRAP SAMPLES (usually would want more, >=100)
## for loop to compute as many samples as specified
for(i in 1:iter) {
if(i==1) {boot.means <- list()} # generate new list
# store the results in new element i
boot.means[[i]] <- lapply(budget.lp.df.SPLIT, boot.fre)
print(i)
}
iter <- 10 # NUMBER OF BOOTSTRAP SAMPLES (usually would want more, >=100)
## for loop to compute as many samples as specified
for(i in 1:iter) {
if(i==1) {boot.means <- list()} # generate new list
# store the results in new element i
boot.means[[i]] <- lapply(sotu.split, boot.fre)
print(i)
}
## combine the point estimates to a data frame and compute statistics by party
boot.means.df <- do.call(rbind.data.frame, boot.means)
mean.boot <- apply(boot.means.df, 2, mean)
sd.boot <- apply(boot.means.df, 2, sd)
## create data frame for plot
plot_df <- data.frame(sotu.df$year, mean.boot, sd.boot) |>
setNames(c("year", "mean", "se"))
sotu.df$year
mean.boot
## create data frame for plot
plot_df <- data.frame(sort(unique(sotu.df$year)), mean.boot, sd.boot) |>
setNames(c("year", "mean", "se"))
## confidence intervals
ci90 <- qnorm(0.95)
ci95 <- qnorm(0.975)
## ggplot point estimate + variance
ggplot(plot_df, aes(colour = year)) + # general setup for plot
geom_linerange(aes(x = year,
ymin = mean - se*ci90,
ymax = mean + se*ci90),
lwd = 1, position = position_dodge(width = 1/2)) + # plot 90% interval
geom_pointrange(aes(x = year,
y = mean,
ymin = mean - se*ci95,
ymax = mean + se*ci95),
lwd = 1/2, position = position_dodge(width = 1/2),
shape = 21, fill = "WHITE") + # plot point estimates and 95% interval
coord_flip() + # fancy stuff
theme_bw() + # fancy stuff
xlab("") + ylab("Mean Flesch Score, by Year") + # fancy stuff
theme(legend.position = "none") # fancy stuff
pacman::p_load(corpus, dplyr, ggplot2, gutenbergr, quanteda, quanteda.corpora, quanteda.textstats,
readtext, rperseus, sotu, stringr, stylest, text.alignment)
## ggplot point estimate + variance
ggplot(plot_df, aes(colour = year)) + # general setup for plot
geom_linerange(aes(x = year,
ymin = mean - se*ci90,
ymax = mean + se*ci90),
lwd = 1, position = position_dodge(width = 1/2)) + # plot 90% interval
geom_pointrange(aes(x = year,
y = mean,
ymin = mean - se*ci95,
ymax = mean + se*ci95),
lwd = 1/2, position = position_dodge(width = 1/2),
shape = 21, fill = "WHITE") + # plot point estimates and 95% interval
coord_flip() + # fancy stuff
theme_bw() + # fancy stuff
xlab("") + ylab("Mean Flesch Score, by Year") + # fancy stuff
theme(legend.position = "none") # fancy stuff
flesch_point <- sotu.df$text %>%
textstat_readability(measure = "Flesch") %>%
group_by(sotu.df$year) %>%
summarise(mean_flesch = mean(Flesch)) %>%
setNames(c("year", "mean")) %>%
arrange(as.numeric(year))
cbind(flesch_point, "bs_mean" = plot_df$mean)
# calculate the FRE score and the Dale-Chall score.
fre_and_dc_measures <- textstat_readability(sotu.sub, c("Flesch", "Dale.Chall"))
# compute correlations
readability_cor <- cor(cbind(fre_and_dc_measures$Flesch, fre_and_dc_measures$Dale.Chall))
# print
rownames(readability_cor) <- c("Flesch", "Dale-Chall")
colnames(readability_cor) <- c("Flesch", "Dale-Chall")
readability_cor
docs <- corpus( readtext(paste0("/Users/christianbaehr/Documents/GitHub/pol504_private/homework1/", c("melania", "michelle"), ".txt")) )
# set gap to default (-1)
sw2 <- smith_waterman(as.character(docs)[1], as.character(docs)[2],
type="words", gap=-1)
# increase gap penalty to -5 --> reduces extent of plagiarism. Why?
sw3 <- smith_waterman(as.character(docs)[1], as.character(docs)[2],
type="words", gap=-5)
sw2
sw3
View(sw2)
sw2$sw
sw3$sw
help("textstat_readability")
# calculate the FRE score and the Dale-Chall score.
fre_and_dc_measures <- textstat_readability(sotu.sub, c("Flesch", "FOG"))
View(fre_and_dc_measures)
# calculate the FRE score and the Dale-Chall score.
fre_and_dc_measures <- textstat_readability(sotu.sub, c("Flesch", "FOG"))
# compute correlations
readability_cor <- cor(cbind(fre_and_dc_measures$Flesch, fre_and_dc_measures$FOG))
# print
rownames(readability_cor) <- c("Flesch", "FOG")
colnames(readability_cor) <- c("Flesch", "FOG")
readability_cor
rm(list = ls())
setwd("/Users/christianbaehr/Documents/GitHub/pol504_private/homework1/")
pacman::p_load(corpus, dplyr, ggplot2, gutenbergr, quanteda, quanteda.corpora, quanteda.textstats,
readtext, rperseus, sotu, stringr, stylest, text.alignment)
R.Version()
library(sf)
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties
gsub("\t", "", counties)
counties <- gsub("\t", "", counties)
gsub("<option value=\", "", counties)
)
sdfa
)))
((()))
(
>
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties <- gsub('<option value=\\\\', "", counties)
counties
gsub('<option value=([\\])', "", counties)
counties <- gsub('<option value=', "", counties)
counties
counties <- gsub('option>', "", counties)
counties
gsub('"', '', counties)
gsub('"|<', '', counties)
gsub('"|<|>', '', counties)
gsub('"|<|>|\\d', '', counties)
gsub('"|<|>|\\d|//', '', counties)
gsub('"|<|>|\\d|////', '', counties)
gsub('"|<|>|\\d|///', '', counties)
gsub('"|<|>|\\d|', '', counties)
counties <- gsub('"|<|>|\\d|', '', counties)
counties
counties <- gsub('////', '', counties)
counties
gsub('////', '', counties)
counties <- gsub("([\\])","", counties)
counties
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties <- gsub('option|value|select', "", counties)
counties <- gsub('"|<|>|\\d|=', '', counties)
counties
gsub("([/])","", counties)
gsub("/","", counties)
counties <- trimws(gsub("/","", counties))
counties
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties <- gsub('option|value|select|eded', "", counties)
counties <- gsub('"|<|>|\\d|=', '', counties)
counties <- trimws(gsub("/","", counties))
counties
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties <- gsub('option|value|select|eded', "", counties)
counties <- gsub('"|<|>|\\d|=', '', counties)
counties <- trimws(gsub("/","", counties))
counties
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties <- gsub('option|value|selected', "", counties)
counties <- gsub('"|<|>|\\d|=', '', counties)
counties <- trimws(gsub("/","", counties))
counties
write.table(counties, "/Users/christianbaehr/Desktop/county_names.txt", row.names = F)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
pacman::p_load(quanteda, quanteda.corpora, quanteda.textstats, dplyr, ggplot2, stringr)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
pacman::p_load(quanteda, quanteda.corpora, quanteda.textstats, dplyr, ggplot2, stringr, sotu)
# merge the meta and text dataframes from the sotu package
sotu <- cbind(sotu_meta, sotu_text)
View(sotu)
sotu <- corpus(sotu, text_field = "sotu.text")
View(sotu)
sotu <- corpus(sotu, text_field = "sotu_text")
# merge the meta and text dataframes from the sotu package
sotu <- cbind(sotu_meta, sotu_text)
sotu <- sotu[which(sotu$year %in% 2007:2010), ]
sotu <- corpus(sotu, text_field = "sotu_text")
sotu.corpus <- corpus(sotu, text_field = "sotu_text")
sotu.tokens <- tokens(sotu.corpus)
library(quanteda.corpora)
ukmnfs <- data_corpus_ukmanifestos
test <- corpus_reshape(ukmnfs, to = "sentences")
library(quanteda)
library(quanteda.corpora)
ukmnfs <- data_corpus_ukmanifestos
test <- corpus_reshape(ukmnfs, to = "sentences")
test.colloc_6b <- textstat_collocations(test) %>% filter(collocation == "united kingdom")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
pacman::p_load(quanteda, quanteda.corpora, quanteda.textstats, dplyr, ggplot2,
readtext, stringr, sotu, gutenbergr, stylest, text.alignment)
test.colloc_6b <- textstat_collocations(test) %>% filter(collocation == "united kingdom")
library(quanteda.corpora)
ukmnfs <- data_corpus_ukmanifestos
test <- corpus_reshape(ukmnfs, to = "sentences")
test.colloc_6b <- textstat_collocations(test) %>% filter(collocation == "united kingdom")
test.colloc_6b
test.colloc_6c <- textstat_collocations(test,  min_count=5)
##Lambda
test.colloc_6c_top10_lam <- test.colloc_6c %>% arrange(desc(lambda)) %>% top_n(10)
setwd("/Users/christianbaehr/Documents/GitHub/POL504_precept_2023/data/")
pacman::p_load(dplyr, glmnet, quanteda, ROCR, caret)
news_data <- readRDS("news_data.rds")
View(news_data)
news_samp <- news_data %>% filter(category %in% c("WEIRD NEWS", "GOOD NEWS")) %>%
select(headline, category) %>% setNames(c("text", "class"))
## get a sense of how the text looks
dim(news_samp)
head(news_samp$text[news_samp$class == "WEIRD NEWS"])
head(news_samp$text[news_samp$class == "GOOD NEWS"])
## some pre-processing (the rest will let dfm do)
news_samp$text <- gsub(pattern = "'", "", news_samp$text)  # replace apostrophes
news_samp$class <- ifelse(news_samp$class=="WEIRD NEWS", 0, 1)
## what's the distribution of classes?
prop.table(table(news_samp$class))
news_dfm <- tokens(news_samp$text, remove_punct = T) %>%
dfm() %>%
dfm_remove(stopwords("en")) %>%
dfm_wordstem() %>% convert("matrix")
dim(news_dfm)
y <- news_samp$class
X <- news_dfm
train.indx <- sample(1:nrow(X), floor(2/3 * nrow(X)))
y.train <- y[train.indx]
X.train <- X[train.indx,]
y.test <- y[-train.indx]
X.test <- X[-train.indx,]
cvout.ridge <- cv.glmnet(X.train, y.train, alpha=0)
plot(cvout.ridge)
help("cv.glmnet")
help("glmnet")
dim(news_dfm)
pred.ridge <- predict (cvout.ridge, s="lambda.min", newx=X.test)
View(pred.ridge)
error <- pred.ridge - y.test
predictions <- cbind.data.frame(y.test, pred.ridge, error, news_samp$text[-train.indx]) |>
setNames(c("actual", "predicted", "error", "text"))
View(predictions)
extract.coef <- function(term) {
allbetas <- as.matrix(coef(cvout.ridge))
coef.loc <- grep(term, rownames(allbetas))
beta <- allbetas[coef.loc, ]
return(beta)
}
extract.coef("dog")
extract.coef("dino")
pred.ridge
y.test
pred.ridge
pred.ridge
pred.ridge > 0.2
(pred.ridge > 0.2)
fp <- (pred.ridge > 0.2) & y.test==0
tp <- (pred.ridge > 0.2) & y.test==1
fp.rate <- fp / (fp+tn)
fp <- (pred.ridge > 0.2) & y.test==0
tp <- (pred.ridge > 0.2) & y.test==1
fn <- (pred.ridge <= 0.2) & y.test==1
tn <- (pred.ridge <= 0.2) & y.test==0
fp.rate <- fp / (fp+tn)
tp.rate <- tp / (tp+fn)
fp <- (pred.ridge > 0.2) & y.test==0
fp <- sum((pred.ridge > 0.2) & y.test==0)
tp <- sum((pred.ridge > 0.2) & y.test==1)
fn <- sum((pred.ridge <= 0.2) & y.test==1)
tn <- sum((pred.ridge <= 0.2) & y.test==0)
fp.rate <- fp / (fp+tn)
tp.rate <- tp / (tp+fn)
fp.rate
tp.rate
roc <- function(threshold) {
fp <- sum((pred.ridge > threshold) & y.test==0)
tp <- sum((pred.ridge > threshold) & y.test==1)
fn <- sum((pred.ridge <= threshold) & y.test==1)
tn <- sum((pred.ridge <= threshold) & y.test==0)
fp.rate <- fp / (fp+tn)
tp.rate <- tp / (tp+fn)
return(c( fp.rate, tp.rate ))
}
rates <- seq(0.1, 1, 0.1)
rates
roc.data <- sapply(rates, roc)
View(roc.data)
roc.data <- t(roc.data)
plot(roc.data)
plot(roc.data)
pred.cutoff <- prediction(pred.ridge, y.test)
## evaluate TP/FP rate at each cutoff
pred.tpr <- performance(pred.cutoff, measure="tpr", x.measure="fpr")
## plot results
plot(pred.tpr, colorize=F, col="red") # plot ROC curve
lines(c(0,1),c(0,1), col = "black", lty = 4 ) # baseline
pred.auc <- performance(pred.cutoff, measure = "auc")
pred.auc@y.values[[1]] # extract the total area under curve
