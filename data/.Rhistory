tokens(remove_punct = T) %>%
kwic("churchil", window = 5)
corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>%
kwic("nation", window = 5)
corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>%
kwic("churchil", window = 5)
corpus <- corpus_subset(data_corpus_ukmanifestos, Year %in% c(1945:1955))
corpus <- tolower(corpus)
# key words in context
corpus_subset(corpus, Party == "Con") %>%
tokens(remove_punct = T) %>%
kwic("nation", window = 5)
corpus_subset(corpus, Party == "Con") %>%
tokens(remove_punct = T) %>%
kwic("churchil", window = 5)
corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>%
kwic("nation", window = 5)
corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>%
kwic("churchil", window = 5)
corpus <- corpus_subset(data_corpus_ukmanifestos, Year %in% c(1945:1955))
corpus <- tolower(corpus)
# key words in context
corpus_subset(corpus, Party == "Con") %>%
tokens(remove_punct = T) %>%
kwic("nation", window = 5)
corpus_subset(corpus, Party == "Con") %>%
tokens(remove_punct = T) %>%
kwic("churchil", window = 5)
corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>%
kwic("nation", window = 5)
corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>%
kwic("churchil", window = 5)
topfeatures(corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T))
topfeatures(corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>% dfm())
topfeatures(corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>% tokens_remove(stopwords()) %>% dfm())
topfeatures(corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>% tokens_remove(stopwords()) %>% dfm(), 100)
grep("churchil", corpus)
corpus_subset(corpus, Party == "Con") %>%
tokens(remove_punct = T) %>%
kwic("interest", window = 5)
corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>%
kwic("nation", window = 5)
corpus_subset(corpus, Party == "Lib") %>%
tokens(remove_punct = T) %>%
kwic("interest", window = 5)
sotu.sub <- sotu[which(sotu$year %in% 1982:2020),]
sotu.tokens <- tokens(sotu.sub)
sotu.sub <- corpus_reshape(sotu.sub, "sentence")
sotu.tokens <- tokens(sotu.sub)
sotu.sub <- data.frame(corpus_reshape(sotu.sub, "sentence"))
View(sotu.sub)
sotu.sub <- corpus_reshape(sotu.sub, "sentence")
sotu.sub <- sotu[which(sotu$year %in% 1982:2020),]
sotu.sub <- corpus_reshape(sotu.sub, "sentence")
docvars(sotu.sub)
#sotu.tokens <- tokens(sotu.sub)
sotu.df <- cbind(as.character(sotu.sub), docvars(sotu.sub["year"])) |>
setNames("text", "year")
#sotu.tokens <- tokens(sotu.sub)
sotu.df <- cbind(as.character(sotu.sub), docvars(sotu.sub["year"])) |>
setNames(c("text", "year"))
docvars(sotu.sub["year"])
#sotu.tokens <- tokens(sotu.sub)
sotu.df <- cbind(as.character(sotu.sub), docvars(sotu.sub)["year"]) |>
setNames(c("text", "year"))
sotu.split <- split(sotu.sub, as.factor(sotu.df$year))
View(sotu.split)
boot.fre <- function(year) { # accepts df of texts (year-specific)
n <- nrow(year) # number of texts
docnums <- sample(1:n, size=n, replace=T) # sample texts WITH replacement
docs.boot <- year[docnums, "text"]
docnames(docs.boot) <- 1:length(docs.boot) # something you have to do
fre <- textstat_readability(docs.boot, measure = "Flesch") # compute FRE for each
return(mean(fre[,"Flesch"])) # return flesch scores only
}
lapply(sotu.split, boot.fre) # apply to each df of party texts
View(sotu.split)
docvars(sotu.sub)
#sotu.tokens <- tokens(sotu.sub)
sotu.df <- cbind(as.character(sotu.sub), docvars(sotu.sub)["year"]) |>
setNames(c("text", "year", "sotu_type"))
#sotu.tokens <- tokens(sotu.sub)
sotu.df <- cbind(as.character(sotu.sub), docvars(sotu.sub)["year"], docvars(sotu.sub)["sotu_type"]) |>
setNames(c("text", "year", "type"))
sotu.split <- split(sotu.sub, as.factor(sotu.df$year))
boot.fre <- function(year) { # accepts df of texts (year-specific)
n <- nrow(year) # number of texts
docnums <- sample(1:n, size=n, replace=T) # sample texts WITH replacement
docs.boot <- year[docnums, "text"]
docnames(docs.boot) <- 1:length(docs.boot) # something you have to do
fre <- textstat_readability(docs.boot, measure = "Flesch") # compute FRE for each
return(mean(fre[,"Flesch"])) # return flesch scores only
}
lapply(sotu.split, boot.fre) # apply to each df of party texts
View(sotu.split)
#sotu.tokens <- tokens(sotu.sub)
sotu.df <- cbind(as.character(sotu.sub), docvars(sotu.sub)["year"], docvars(sotu.sub)["sotu_type"]) |>
setNames(c("text", "year", "type"))
sotu.split <- split(sotu.df, as.factor(sotu.df$year))
boot.fre <- function(year) { # accepts df of texts (year-specific)
n <- nrow(year) # number of texts
docnums <- sample(1:n, size=n, replace=T) # sample texts WITH replacement
docs.boot <- year[docnums, "text"]
docnames(docs.boot) <- 1:length(docs.boot) # something you have to do
fre <- textstat_readability(docs.boot, measure = "Flesch") # compute FRE for each
return(mean(fre[,"Flesch"])) # return flesch scores only
}
lapply(sotu.split, boot.fre) # apply to each df of party texts
#sotu.tokens <- tokens(sotu.sub)
sotu.df <- cbind(as.character(sotu.sub), docvars(sotu.sub)["year"]) |>
setNames(c("text", "year"))
sotu.split <- split(sotu.df, as.factor(sotu.df$year))
boot.fre <- function(year) { # accepts df of texts (year-specific)
n <- nrow(year) # number of texts
docnums <- sample(1:n, size=n, replace=T) # sample texts WITH replacement
docs.boot <- year[docnums, "text"]
docnames(docs.boot) <- 1:length(docs.boot) # something you have to do
fre <- textstat_readability(docs.boot, measure = "Flesch") # compute FRE for each
return(mean(fre[,"Flesch"])) # return flesch scores only
}
lapply(sotu.split, boot.fre) # apply to each df of party texts
docs.boot <- corpus(year[docnums, "text"])
boot.fre <- function(year) { # accepts df of texts (year-specific)
n <- nrow(year) # number of texts
docnums <- sample(1:n, size=n, replace=T) # sample texts WITH replacement
docs.boot <- corpus(year[docnums, "text"])
docnames(docs.boot) <- 1:length(docs.boot) # something you have to do
fre <- textstat_readability(docs.boot, measure = "Flesch") # compute FRE for each
return(mean(fre[,"Flesch"])) # return flesch scores only
}
lapply(sotu.split, boot.fre) # apply to each df of party texts
iter <- 10 # NUMBER OF BOOTSTRAP SAMPLES (usually would want more, >=100)
## for loop to compute as many samples as specified
for(i in 1:iter) {
if(i==1) {boot.means <- list()} # generate new list
# store the results in new element i
boot.means[[i]] <- lapply(budget.lp.df.SPLIT, boot.fre)
print(i)
}
iter <- 10 # NUMBER OF BOOTSTRAP SAMPLES (usually would want more, >=100)
## for loop to compute as many samples as specified
for(i in 1:iter) {
if(i==1) {boot.means <- list()} # generate new list
# store the results in new element i
boot.means[[i]] <- lapply(sotu.split, boot.fre)
print(i)
}
## combine the point estimates to a data frame and compute statistics by party
boot.means.df <- do.call(rbind.data.frame, boot.means)
mean.boot <- apply(boot.means.df, 2, mean)
sd.boot <- apply(boot.means.df, 2, sd)
## create data frame for plot
plot_df <- data.frame(sotu.df$year, mean.boot, sd.boot) |>
setNames(c("year", "mean", "se"))
sotu.df$year
mean.boot
## create data frame for plot
plot_df <- data.frame(sort(unique(sotu.df$year)), mean.boot, sd.boot) |>
setNames(c("year", "mean", "se"))
## confidence intervals
ci90 <- qnorm(0.95)
ci95 <- qnorm(0.975)
## ggplot point estimate + variance
ggplot(plot_df, aes(colour = year)) + # general setup for plot
geom_linerange(aes(x = year,
ymin = mean - se*ci90,
ymax = mean + se*ci90),
lwd = 1, position = position_dodge(width = 1/2)) + # plot 90% interval
geom_pointrange(aes(x = year,
y = mean,
ymin = mean - se*ci95,
ymax = mean + se*ci95),
lwd = 1/2, position = position_dodge(width = 1/2),
shape = 21, fill = "WHITE") + # plot point estimates and 95% interval
coord_flip() + # fancy stuff
theme_bw() + # fancy stuff
xlab("") + ylab("Mean Flesch Score, by Year") + # fancy stuff
theme(legend.position = "none") # fancy stuff
pacman::p_load(corpus, dplyr, ggplot2, gutenbergr, quanteda, quanteda.corpora, quanteda.textstats,
readtext, rperseus, sotu, stringr, stylest, text.alignment)
## ggplot point estimate + variance
ggplot(plot_df, aes(colour = year)) + # general setup for plot
geom_linerange(aes(x = year,
ymin = mean - se*ci90,
ymax = mean + se*ci90),
lwd = 1, position = position_dodge(width = 1/2)) + # plot 90% interval
geom_pointrange(aes(x = year,
y = mean,
ymin = mean - se*ci95,
ymax = mean + se*ci95),
lwd = 1/2, position = position_dodge(width = 1/2),
shape = 21, fill = "WHITE") + # plot point estimates and 95% interval
coord_flip() + # fancy stuff
theme_bw() + # fancy stuff
xlab("") + ylab("Mean Flesch Score, by Year") + # fancy stuff
theme(legend.position = "none") # fancy stuff
flesch_point <- sotu.df$text %>%
textstat_readability(measure = "Flesch") %>%
group_by(sotu.df$year) %>%
summarise(mean_flesch = mean(Flesch)) %>%
setNames(c("year", "mean")) %>%
arrange(as.numeric(year))
cbind(flesch_point, "bs_mean" = plot_df$mean)
# calculate the FRE score and the Dale-Chall score.
fre_and_dc_measures <- textstat_readability(sotu.sub, c("Flesch", "Dale.Chall"))
# compute correlations
readability_cor <- cor(cbind(fre_and_dc_measures$Flesch, fre_and_dc_measures$Dale.Chall))
# print
rownames(readability_cor) <- c("Flesch", "Dale-Chall")
colnames(readability_cor) <- c("Flesch", "Dale-Chall")
readability_cor
docs <- corpus( readtext(paste0("/Users/christianbaehr/Documents/GitHub/pol504_private/homework1/", c("melania", "michelle"), ".txt")) )
# set gap to default (-1)
sw2 <- smith_waterman(as.character(docs)[1], as.character(docs)[2],
type="words", gap=-1)
# increase gap penalty to -5 --> reduces extent of plagiarism. Why?
sw3 <- smith_waterman(as.character(docs)[1], as.character(docs)[2],
type="words", gap=-5)
sw2
sw3
View(sw2)
sw2$sw
sw3$sw
help("textstat_readability")
# calculate the FRE score and the Dale-Chall score.
fre_and_dc_measures <- textstat_readability(sotu.sub, c("Flesch", "FOG"))
View(fre_and_dc_measures)
# calculate the FRE score and the Dale-Chall score.
fre_and_dc_measures <- textstat_readability(sotu.sub, c("Flesch", "FOG"))
# compute correlations
readability_cor <- cor(cbind(fre_and_dc_measures$Flesch, fre_and_dc_measures$FOG))
# print
rownames(readability_cor) <- c("Flesch", "FOG")
colnames(readability_cor) <- c("Flesch", "FOG")
readability_cor
rm(list = ls())
setwd("/Users/christianbaehr/Documents/GitHub/pol504_private/homework1/")
pacman::p_load(corpus, dplyr, ggplot2, gutenbergr, quanteda, quanteda.corpora, quanteda.textstats,
readtext, rperseus, sotu, stringr, stylest, text.alignment)
R.Version()
library(sf)
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties
gsub("\t", "", counties)
counties <- gsub("\t", "", counties)
gsub("<option value=\", "", counties)
)
sdfa
)))
((()))
(
>
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties <- gsub('<option value=\\\\', "", counties)
counties
gsub('<option value=([\\])', "", counties)
counties <- gsub('<option value=', "", counties)
counties
counties <- gsub('option>', "", counties)
counties
gsub('"', '', counties)
gsub('"|<', '', counties)
gsub('"|<|>', '', counties)
gsub('"|<|>|\\d', '', counties)
gsub('"|<|>|\\d|//', '', counties)
gsub('"|<|>|\\d|////', '', counties)
gsub('"|<|>|\\d|///', '', counties)
gsub('"|<|>|\\d|', '', counties)
counties <- gsub('"|<|>|\\d|', '', counties)
counties
counties <- gsub('////', '', counties)
counties
gsub('////', '', counties)
counties <- gsub("([\\])","", counties)
counties
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties <- gsub('option|value|select', "", counties)
counties <- gsub('"|<|>|\\d|=', '', counties)
counties
gsub("([/])","", counties)
gsub("/","", counties)
counties <- trimws(gsub("/","", counties))
counties
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties <- gsub('option|value|select|eded', "", counties)
counties <- gsub('"|<|>|\\d|=', '', counties)
counties <- trimws(gsub("/","", counties))
counties
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties <- gsub('option|value|select|eded', "", counties)
counties <- gsub('"|<|>|\\d|=', '', counties)
counties <- trimws(gsub("/","", counties))
counties
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties
counties <- readLines("/Users/christianbaehr/Desktop/counties.txt")
counties <- gsub("\t", "", counties)
counties <- gsub('option|value|selected', "", counties)
counties <- gsub('"|<|>|\\d|=', '', counties)
counties <- trimws(gsub("/","", counties))
counties
write.table(counties, "/Users/christianbaehr/Desktop/county_names.txt", row.names = F)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
pacman::p_load(quanteda, quanteda.corpora, quanteda.textstats, dplyr, ggplot2, stringr)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
pacman::p_load(quanteda, quanteda.corpora, quanteda.textstats, dplyr, ggplot2, stringr, sotu)
# merge the meta and text dataframes from the sotu package
sotu <- cbind(sotu_meta, sotu_text)
View(sotu)
sotu <- corpus(sotu, text_field = "sotu.text")
View(sotu)
sotu <- corpus(sotu, text_field = "sotu_text")
# merge the meta and text dataframes from the sotu package
sotu <- cbind(sotu_meta, sotu_text)
sotu <- sotu[which(sotu$year %in% 2007:2010), ]
sotu <- corpus(sotu, text_field = "sotu_text")
sotu.corpus <- corpus(sotu, text_field = "sotu_text")
sotu.tokens <- tokens(sotu.corpus)
library(quanteda.corpora)
ukmnfs <- data_corpus_ukmanifestos
test <- corpus_reshape(ukmnfs, to = "sentences")
library(quanteda)
library(quanteda.corpora)
ukmnfs <- data_corpus_ukmanifestos
test <- corpus_reshape(ukmnfs, to = "sentences")
test.colloc_6b <- textstat_collocations(test) %>% filter(collocation == "united kingdom")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
pacman::p_load(quanteda, quanteda.corpora, quanteda.textstats, dplyr, ggplot2,
readtext, stringr, sotu, gutenbergr, stylest, text.alignment)
test.colloc_6b <- textstat_collocations(test) %>% filter(collocation == "united kingdom")
library(quanteda.corpora)
ukmnfs <- data_corpus_ukmanifestos
test <- corpus_reshape(ukmnfs, to = "sentences")
test.colloc_6b <- textstat_collocations(test) %>% filter(collocation == "united kingdom")
test.colloc_6b
test.colloc_6c <- textstat_collocations(test,  min_count=5)
##Lambda
test.colloc_6c_top10_lam <- test.colloc_6c %>% arrange(desc(lambda)) %>% top_n(10)
a <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/Dennis+Schwartz/id.Dennis+Schwartz")
View(a)
a <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/Dennis+Schwartz/id.Dennis+Schwartz")
b <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/Dennis+Schwartz/rating.Dennis+Schwartz")
c <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/Dennis+Schwartz/subj.Dennis+Schwartz")
c <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/Dennis+Schwartz/subj.Dennis+Schwartz")
help("read.table")
c <- scan("/Users/christianbaehr/Downloads/scale_data/scaledata/Dennis+Schwartz/subj.Dennis+Schwartz")
c <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/Dennis+Schwartz/subj.Dennis+Schwartz", sep = "\n")
View(c)
View(c)
a <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/James+Berardinelli/id.James+Berardinelli")
b <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/Dennis+Schwartz/rating.James+Berardinelli")
b <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/James+Berardinelli/rating.James+Berardinelli")
c <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/James+Berardinelli/subj.James+Berardinelli", sep = "\n")
c <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/James+Berardinelli/subj.James+Berardinelli", sep = "\n", quote = "")
View(c)
reviews <- cbind(a, b, c)
View(reviews)
reviews <- cbind(a, b, c) |>
setNames(c("id", "rating", "text"))
b <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/James+Berardinelli/label.4class.James+Berardinelli")
c <- read.table("/Users/christianbaehr/Downloads/scale_data/scaledata/James+Berardinelli/subj.James+Berardinelli", sep = "\n", quote = "")
reviews <- cbind(a, b, c) |>
setNames(c("id", "rating", "text"))
View(reviews)
table(reviews$rating)
root <- "/Users/christianbaehr/Downloads/scale_data/scaledata/%s/id.%s"
sprintf(root, "James+Berardinelli")
sprintf(root, c("James+Berardinelli", "James+Berardinelli"))
help(sprintf)
sprintf(root, "James+Berardinelli", "James+Berardinelli")
join <- function(name, class) {
a <- read.table(root, class, name, name)
b <- read.table(root, class, name, name)
c <- read.table(root, class, name, name)
reviews <- cbind(a, b, c) |>
setNames(c("id", "rating", "text"))
return(reviews)
}
names <- c("James+Berardinelli")
root <- "/Users/christianbaehr/Downloads/scale_data/scaledata/%s/%s.%s"
join <- function(name) {
a <- read.table(root, name, "id", name)
b <- read.table(root, name, "label", name)
c <- read.table(root, name, "subj", name)
reviews <- cbind(a, b, c) |>
setNames(c("id", "rating", "text"))
return(reviews)
}
names <- c("James+Berardinelli")
lapply(names, join)
root <- "/Users/christianbaehr/Downloads/scale_data/scaledata/%s/%s.%s"
join <- function(name) {
a <- read.table(sprintf(root, name, "id", name))
b <- read.table(sprintf(root, name, "label", name))
c <- read.table(sprintf(root, name, "subj", name))
reviews <- cbind(a, b, c) |>
setNames(c("id", "rating", "text"))
return(reviews)
}
names <- c("James+Berardinelli")
lapply(names, join)
root <- "/Users/christianbaehr/Downloads/scale_data/scaledata/%s/%s.%s"
join <- function(name) {
a <- read.table(sprintf(root, name, "id", name))
b <- read.table(sprintf(root, name, "label.4class", name))
c <- read.table(sprintf(root, name, "subj", name))
reviews <- cbind(a, b, c) |>
setNames(c("id", "rating", "text"))
return(reviews)
}
names <- c("James+Berardinelli")
lapply(names, join)
root <- "/Users/christianbaehr/Downloads/scale_data/scaledata/%s/%s.%s"
join <- function(name) {
a <- read.table(sprintf(root, name, "id", name))
b <- read.table(sprintf(root, name, "label.4class", name))
c <- read.table(sprintf(root, name, "subj", name), sep = "\n", quote = "")
reviews <- cbind(a, b, c) |>
setNames(c("id", "rating", "text"))
return(reviews)
}
names <- c("James+Berardinelli")
lapply(names, join)
root <- "/Users/christianbaehr/Downloads/scale_data/scaledata/%s/%s.%s"
join <- function(name) {
a <- read.table(sprintf(root, name, "id", name))
b <- read.table(sprintf(root, name, "label.4class", name))
c <- read.table(sprintf(root, name, "subj", name), sep = "\n", quote = "")
reviews <- cbind(a, b, c) |>
setNames(c("id", "rating", "text"))
return(reviews)
}
names <- c("James+Berardinelli", "Dennis+Schwartz", "Scott+Renshaw", "Steve+Rhodes")
out <- lapply(names, join)
out <- do.call(rbind, out)
View(out)
table(out$rating)
write.csv(out, "/Users/christianbaehr/Desktop/movie_reviews.csv", row.names = F)
## load packages
pacman::p_load(quanteda, quanteda.corpora, readtext, quanteda.textmodels,
quanteda.textplots, dplyr)
setwd("/Users/christianbaehr/Documents/GitHub/POL504_precept_2023/data/")
## package dependencies
pacman::p_load(quanteda, quanteda.corpora, dplyr, lsa, factoextra, text2vec, quanteda.textmodels)
data("data_corpus_sotu")
SOTU <- corpus_subset(data_corpus_sotu, Date > "1900-01-01")
SOTU_dfm <- tokens(SOTU, remove_punct = T) %>%
dfm() %>%
dfm_remove(stopwords("en")) %>%
dfm_wordstem()
SOTU_mat <- as.matrix(SOTU_dfm)
dim(SOTU_mat)
## only keep complete rows (1)
SOTU_mat <- SOTU_mat[complete.cases(SOTU_mat) , ]
SOTU_mat_normal <- scale(SOTU_mat)
## estimate the principal components of the DFM
SOTU_pca <- prcomp(SOTU_mat_normal)
View(SOTU_pca)
## visualize the variance contribution of each component
fviz_eig(SOTU_pca, addlabels = TRUE)
SOTU_pca$x
View(SOTU_pca$x)  # each observation
## variable importance for each PC
SOTU_pca$rotation
dim(SOTU_pca$rotation)
View(SOTU_pca$rotation)
SOTU_pca$rotation[ , 1]
abs(SOTU_pca$rotation[ , 1])
sort(abs(SOTU_pca$rotation[ , 1]))[1:10]
cor(SOTU_pca$rotation[ , 1], SOTU_pca$rotation[ , 2])
## format the components
pr.comps <- data.frame(SOTU_pca$x) # dataframe
pr.comps$party <- as.character(docvars(SOTU_dfm)[ , "party"]) # get party from corpus
pr.comps <- pr.comps[order(pr.comps$PC1), ] # order by PC1 value
pr.comps$order <- 1:nrow(pr.comps)
ggplot(pr.comps, aes(x = order, y = PC1, label = rownames(pr.comps), color = party)) +
geom_text(size = 2) +
scale_color_manual(values = c("#013364","#cc0000")) +
theme_bw()
ggplot(pr.comps, aes(x = PC1, y = PC2, label = rownames(pr.comps), color = party)) +
geom_text(size = 2) +
scale_color_manual(values = c("#013364","#cc0000")) +
theme_bw()
## function computes cosine similarity between query and all documents and
## returns N most similar
nearest.neighbors <- function(query, low_dim_space, N = 5, norm = "l2"){
cos_sim <- sim2(x = low_dim_space, y = low_dim_space[query, , drop = FALSE], method = "cosine", norm = norm)
nn <- cos_sim <- cos_sim[order(-cos_sim),]
return(names(nn)[2:(N + 1)])  # query is always the nearest neighbor hence dropped
}
## apply to document retrieval
nearest.neighbors(query = "Obama-2009", low_dim_space = SOTU_pca$x)
nearest.neighbors(query = "Reagan-1982", low_dim_space = SOTU_pca$x)
