elections$closeness[elections$closeness==Inf] <- NA
View(elections)
elections <- elections[c("cnty", "year", "district", "dtv", "topvotes", "secondvotes", "closeness")]
elections$iso <- countrycode::countrycode(elections$cnty, origin = "country.name", destination = "iso3c")
View(elections)
View(gdp)
grep("-", elections$district, value = T)
albania <- elections[which(elections$cnty=="Albania"), ]
albania$district <- sapply(albania$district, FUN = function(x) strsplit(x, "-")[2])
View(albania)
albania <- elections[which(elections$cnty=="Albania"), ]
albania$district[1]
strsplit(albania$district[1], "-")
albania$district <- sapply(albania$district, FUN = function(x) strsplit(x, "-")[[1]][2])
View(albania)
elections$district[which(elections$cnty=="Albania")] <- sapply(elections$district[which(elections$cnty=="Albania")],
FUN = function(x) strsplit(x, "-")[[1]][2])
View(elections)
elections$region <- elections$district
dat <- merge(elections, gdp, by=c("iso", "year", "region"))
View(dat)
View(dat)
View(gdp)
View(elections[elections$cnty=="China",])
View(elections[elections$cnty=="Colombia",])
table(elections$iso)
table(elections$district[elections$cnty=="France"])
unique(elections$district[elections$cnty=="France"])
sort(unique(elections$district[elections$cnty=="France"]))
elections <- read.csv("/Users/christianbaehr/Dropbox/satellite_paper/application/GlobalElections_district_elections.csv",
stringsAsFactors = F)
elections <- elections[which(elections$legid==1),]
View(elections)
elections$region <- tolower(elections$district)
gdp$region <- tolower(gdp$region)
dat <- merge(elections, gdp, by=c("iso", "year", "region"))
gdp <- read.csv(file = "/Users/christianbaehr/Dropbox/satellite_paper/application/DOSE_v1.csv",
stringsAsFactors = F)
elections <- read.csv("/Users/christianbaehr/Dropbox/satellite_paper/application/GlobalElections_district_elections.csv",
stringsAsFactors = F)
elections <- elections[which(elections$legid==1),]
elections$nseats <- rowSums(elections[, paste0("p", 1:497, "s")], na.rm = T)
elections <- elections[which(elections$nseats==1), ]
elections$topvotes <- apply(elections[, paste0("p", 1:497, "v")], 1, FUN = function(x) max(x, na.rm=T))
elections$secondvotes <- apply(elections[, paste0("p", 1:497, "v")], 1, FUN = function(x) max(x[x!=max(x, na.rm=T)], na.rm=T))
elections$closeness <- (elections$topvotes - elections$secondvotes) / elections$dtv
elections$closeness[elections$closeness==Inf] <- NA
View(elections[c("cnty", "year", "district", "dtv", "topvotes", "secondvotes", "closeness")])
elections <- elections[c("cnty", "year", "district", "dtv", "topvotes", "secondvotes", "closeness")]
elections$iso <- countrycode::countrycode(elections$cnty, origin = "country.name", destination = "iso3c")
elections$district[which(elections$cnty=="Albania")] <- sapply(elections$district[which(elections$cnty=="Albania")],
FUN = function(x) strsplit(x, "-")[[1]][2])
elections$region <- tolower(elections$district)
gdp$region <- tolower(gdp$region)
dat <- merge(elections, gdp, by=c("iso", "year", "region"))
View(gdp)
View(elections)
gdp$region <- gsub("ë", "e", gdp$region)
gdp$region <- gsub("ç", "c", gdp$region)
dat <- merge(elections, gdp, by=c("iso", "year", "region"))
elections$region <- trimws(tolower(elections$district))
gdp$region <- trimws(tolower(gdp$region))
gdp$region <- gsub("ë", "e", gdp$region)
gdp$region <- gsub("ç", "c", gdp$region)
dat <- merge(elections, gdp, by=c("iso", "year", "region"))
View(dat)
library("sf")
install.packages("sf")
aus <- sf::st_read("/Users/christianbaehr/Downloads/gadm41_AUS_2.json")
unique(aus$NAME_1)
unique(elections$district[elections$cnty=="Australia"])
unique(aus$NAME_1)
unique(gdp$region[gdp$country=="Australia"])
View(aus)
unique(elections$district[elections$cnty=="Australia"])
unique(aus$NAME_2)
unique(elections$district[elections$cnty=="Australia"])
sort(unique(elections$district[elections$cnty=="Australia"]))
sort(unique(elections$district[elections$cnty=="Australia"]))
sort(unique(aus$NAME_2))
aus <- data.frame(aus[,c("NAME_1", "NAME_2")])
aus <- aus[, names(aus)!="geometry"]
unique(elections$cnty)
library(readxl)
dat <- read_xlsx("/Users/christianbaehr/Downloads/Africa_1997-2023_Aug04-2.xlsx")
warnings()
unique(dat$EVENT_TYPE)
unique(dat$SUB_EVENT_TYPE)
unique(elections$cnty)
dat <- read.csv("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/satellite_papers.csv",
stringsAsFactors = F)
hist(dat$Year, breaks = 23, xlim = c(2000, 2023))
library(ggplot2)
View(dat)
p <- ggplot(data = dat, aes(x=Year, group=Journal, fill=Journal)) +
geom_density(position = "fill")
p
p <- ggplot(data = dat, aes(x=Year, group=Journal, fill=Journal)) +
geom_density()
p
help("geom_density")
p <- ggplot(data = dat, aes(x=Year, group=Journal, fill=Journal)) +
geom_density(position = "fill", stat = "count")
p
p <- ggplot(data = dat, aes(x=Year, group=Journal, fill=Journal)) +
geom_density(position = "stack", stat = "count")
p
p <- ggplot(data = dat, aes(x=Year, stat(count), fill=Journal)) +
geom_density(position = "stack")
p
p <- ggplot(data = dat, aes(x=Year, after_stat(count), fill=Journal)) +
geom_density(position = "stack")
p
p <- ggplot(data = dat, aes(x=Year, after_stat(count), fill=Journal)) +
geom_density(position = "stack") +
theme_ipsum()
install.packages("hrbrthemes")
library(hrbrthemes)
p <- ggplot(data = dat, aes(x=Year, after_stat(count), fill=Journal)) +
geom_density(position = "stack") +
theme_ipsum()
p
p <- ggplot(data = dat, aes(x=Year, after_stat(count), fill=Journal)) +
geom_density(position = "stack")
p
ggsave("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/satellite_papers_image.png",
device = "png")
gdp <- read.csv(file = "/Users/christianbaehr/Dropbox/satellite_paper/application/DOSE_v1.csv",
stringsAsFactors = F)
elections <- read.csv("/Users/christianbaehr/Dropbox/satellite_paper/application/GlobalElections_district_elections.csv",
stringsAsFactors = F)
elections <- elections[which(elections$legid==1),]
elections$nseats <- rowSums(elections[, paste0("p", 1:497, "s")], na.rm = T)
elections <- elections[which(elections$nseats==1), ]
elections$topvotes <- apply(elections[, paste0("p", 1:497, "v")], 1, FUN = function(x) max(x, na.rm=T))
elections$secondvotes <- apply(elections[, paste0("p", 1:497, "v")], 1, FUN = function(x) max(x[x!=max(x, na.rm=T)], na.rm=T))
elections$closeness <- (elections$topvotes - elections$secondvotes) / elections$dtv
elections$closeness[elections$closeness==Inf] <- NA
View(elections[c("cnty", "year", "district", "dtv", "topvotes", "secondvotes", "closeness")])
elections <- elections[c("cnty", "year", "district", "dtv", "topvotes", "secondvotes", "closeness")]
elections$iso <- countrycode::countrycode(elections$cnty, origin = "country.name", destination = "iso3c")
elections$district[which(elections$cnty=="Albania")] <- sapply(elections$district[which(elections$cnty=="Albania")],
FUN = function(x) strsplit(x, "-")[[1]][2])
elections$region <- trimws(tolower(elections$district))
gdp$region <- trimws(tolower(gdp$region))
gdp$region <- gsub("ë", "e", gdp$region)
gdp$region <- gsub("ç", "c", gdp$region)
dat <- merge(elections, gdp, by=c("iso", "year", "region"))
aus <- sf::st_read("/Users/christianbaehr/Downloads/gadm41_AUS_2.json")
aus <- data.frame(aus[,c("NAME_1", "NAME_2")])
aus <- aus[, names(aus)!="geometry"]
library(readxl)
dat <- read_xlsx("/Users/christianbaehr/Downloads/Africa_1997-2023_Aug04-2.xlsx")
################################################################################
ndvi <- read.csv("/Users/christianbaehr/Downloads/64e76de13bdd3f6d15366302/64e76de13bdd3f6d15366302_results.csv",
stringsAsFactors = F)
ndvi <- ndvi[, c("gqid", grep("ltdr",names(ndvi),value=T))]
library(tidyverse)
ndvi2 <- ndvi %>%
pivot_longer(cols = c(grep("ltdr",names(ndvi),value=T)),
names_to = "Variable",
values_to = "Value")
ndvi2$Variable <- gsub("ltdr_avhrr_ndvi_v5_monthly.|.mean", "", ndvi2$Variable)
ndvi2$year <- substr(ndvi2$Variable, 1, 4)
ndvi2$month <- substr(ndvi2$Variable, 5, 6)
ndvi2 <- ndvi2[which(ndvi2$year>=2010), ]
library(sf)
bounds <- st_read("/Users/christianbaehr/Downloads/64e76de13bdd3f6d15366302/KHM_ADM3.geojson")
events <- read.csv("/Users/christianbaehr/Downloads/Asia-Pacific_2018-2023_Aug04.csv", stringsAsFactors = F)
events <- events[which(events$COUNTRY=="Cambodia"), ]
events <- st_as_sf(x=events, coords=c("LONGITUDE", "LATITUDE"), crs=st_crs(4326))
test <- st_intersection(events, bounds)
test$month <- substr(test$EVENT_DATE, 4, nchar(test$EVENT_DATE))
test$month <- substr(test$month, 1, (nchar(test$month)-5))
test$monthnum <- match(test$month, month.name)
test2 <- aggregate(test$EVENT_ID_CNTY, by=list(test$gqid, test$YEAR, test$monthnum), FUN=function(x) length(x))
names(test2) <- c("gqid", "year", "month", "events")
ndvi3 <- merge(ndvi2, test2, by=c("gqid", "year", "month"), all.x=T)
ndvi3$events[is.na(ndvi3$events)] <- 0
lagg <- function(x, years) {
y <- c(NA, x[1:(length(x)-1)])
# 2020 value for previous country carries over into 1970 for current country.
# replace with NA
y[which(years==min(years))] <- NA
return(y)
}
ndvi3$yearmon <- as.numeric(paste0(ndvi3$year, ndvi3$month))
ndvi3 <- ndvi3[order(ndvi3$gqid, ndvi3$yearmon),]
ndvi3$events_l1 <- lagg(ndvi3$events, years=ndvi3$yearmon)
View(ndvi3[which(ndvi3$events>10), ])
summary(lm(Value ~ events, data = ndvi3))
summary(lm(Value ~ events + factor(year), data = ndvi3))
summary(lm(Value ~ events + factor(yearmon), data = ndvi3))
library(raster)
library(rgdal)
ras <- raster("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/ntl_2005.tif")
sum(ras==0)
cellStats(ras)
help("cellStats")
cellStats(ras, stat="mean")
ras <- (ras==0)
hist(ras)
cellStats(ras, stat="mean")
ras <- raster("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/ntl_2005.tif")
#ras[ras==0] <- NA
hist(ras, xlab = "DMSP Nighttime Light Emissions", main = " ", col = "lightgoldenrod")
hist(ras, xlab = "DMSP Nighttime Light Emissions", main = " ", col = "lightgoldenrod", bins=100)
help(hist)
hist(ras, xlab = "DMSP Nighttime Light Emissions", main = " ", col = "lightgoldenrod", breaks=100)
ras <- raster("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/ntl_2005.tif")
ras[ras==0] <- NA
hist(ras, xlab = "DMSP Nighttime Light Emissions", main = " ", col = "lightgoldenrod")
png(file = "/Users/christianbaehr/Dropbox/satellite_paper/descriptive/ntl_hist.png", width = 6, height = 4, res=300, units="in")
ras <- raster("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/ntl_2005.tif")
library(raster)
library(rgdal)
png(file = "/Users/christianbaehr/Dropbox/satellite_paper/descriptive/ntl_hist.png", width = 6, height = 4, res=300, units="in")
ras <- raster("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/ntl_2005.tif")
ras[ras==0] <- NA
hist(ras, xlab = "DMSP Nighttime Light Emissions", main = " ", col = "lightgoldenrod")
dev.off()
png(file = "/Users/christianbaehr/Dropbox/satellite_paper/descriptive/ntl_hist.png", width = 6, height = 4, res=300, units="in")
ras <- raster("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/ntl_2005.tif")
ras[ras==0] <- NA
hist(ras, xlab = "DMSP Nighttime Light Emissions (Zeroes Omitted)", main = " ", col = "lightgoldenrod")
dev.off()
png(file = "/Users/christianbaehr/Dropbox/satellite_paper/descriptive/ntl_hist.png", width = 6, height = 4, res=300, units="in")
ras <- raster("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/ntl_2005.tif")
ras[ras==0] <- NA
hist(ras, xlab = "DMSP Nighttime Light Emissions (Zeros Omitted)", main = " ", col = "lightgoldenrod")
dev.off()
# dat <- read.csv("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/satellite_papers.csv",
#                 stringsAsFactors = F)
dat <- readxl::read_xlsx("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/satellite_papers.xlsx")
dat <- data.frame(dat)
View(dat)
dat <- readxl::read_xlsx("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/satellite_papers.xlsx")
dat <- data.frame(dat)
dat$Measure[which(dat$Measure=="Locality")] <- "Auxiliary"
dat$Purpose <- ifelse(dat$Dependent.Variable=="Y", "Dependent",
ifelse(dat$Treatment.Variable=="Y", "Treatment",
ifelse(dat$Control.Variable=="Y", "Control",
ifelse(dat$Auxiliary=="Y", "Auxiliary", "NA"))))
library(ggplot2)
library(hrbrthemes)
library(RColorBrewer)
p <- ggplot(data = dat, aes(x=Year, after_stat(count), fill=Journal)) +
geom_density(position = "stack")
ggsave("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/satellite_papers_image.png",
device = "png")
p <- ggplot(data = dat, aes(x=Year, after_stat(count), fill=purpose)) +
geom_density(position = "stack") +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(y="Count") +
scale_fill_brewer(palette="Set2")
p
# dat <- read.csv("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/satellite_papers.csv",
#                 stringsAsFactors = F)
dat <- readxl::read_xlsx("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/satellite_papers.xlsx")
dat <- data.frame(dat)
dat$Measure[which(dat$Measure=="Locality")] <- "Auxiliary"
dat$Purpose <- ifelse(dat$Dependent.Variable=="Y", "Dependent",
ifelse(dat$Treatment.Variable=="Y", "Treatment",
ifelse(dat$Control.Variable=="Y", "Control",
ifelse(dat$Auxiliary=="Y", "Auxiliary", "NA"))))
#hist(dat$Year, breaks = 23, xlim = c(2000, 2023))
library(ggplot2)
library(hrbrthemes)
library(RColorBrewer)
p <- ggplot(data = dat, aes(x=Year, after_stat(count), fill=Journal)) +
geom_density(position = "stack")
ggsave("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/satellite_papers_image.png",
device = "png")
p <- ggplot(data = dat, aes(x=Year, after_stat(count), fill=Purpose)) +
geom_density(position = "stack") +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(y="Count") +
scale_fill_brewer(palette="Set2")
p
ggsave("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/satellite_papers_image_purpose.png",
device = "png", width=7, height=4, units = "in")
# p <- ggplot(data = dat, aes(x=Year, after_stat(count), fill=Subfield)) +
#   geom_density(position = "stack")
# p
p <- ggplot(data = dat, aes(x=Year, after_stat(count), fill=Measure)) +
geom_density(position = "stack") +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(y="Count") +
scale_fill_brewer(palette="Set3")
p
ggsave("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/satellite_papers_image_measure.png",
device = "png", width=7, height=4, units = "in")
# dat <- read.csv("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/satellite_papers.csv",
#                 stringsAsFactors = F)
dat <- readxl::read_xlsx("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/satellite_papers.xlsx")
dat <- data.frame(dat)
which(dat$Measure=="Locality")
View(dat)
# The palette with grey:
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# The palette with black:
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# The palette with grey:
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# dat <- read.csv("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/satellite_papers.csv",
#                 stringsAsFactors = F)
dat <- readxl::read_xlsx("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/satellite_papers.xlsx")
dat <- data.frame(dat)
dat$Measure[which(dat$Measure=="Locality")] <- "Auxiliary"
dat$Purpose <- ifelse(dat$Dependent.Variable=="Y", "Dependent",
ifelse(dat$Treatment.Variable=="Y", "Treatment",
ifelse(dat$Control.Variable=="Y", "Control",
ifelse(dat$Auxiliary=="Y", "Auxiliary", "NA"))))
#hist(dat$Year, breaks = 23, xlim = c(2000, 2023))
library(ggplot2)
library(hrbrthemes)
library(RColorBrewer)
p <- ggplot(data = dat, aes(x=Year, after_stat(count), fill=Purpose)) +
geom_density(position = "stack") +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(y="Count") +
scale_fill_manual(values=cbPalette)
p
ggsave("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/satellite_papers_image_purpose.png",
device = "png", width=7, height=4, units = "in")
# p <- ggplot(data = dat, aes(x=Year, after_stat(count), fill=Subfield)) +
#   geom_density(position = "stack")
# p
p <- ggplot(data = dat, aes(x=Year, after_stat(count), fill=Measure)) +
geom_density(position = "stack") +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(y="Count") +
scale_fill_manual(values=cbPalette)
p
ggsave("/Users/christianbaehr/Dropbox/satellite_paper/descriptive/satellite_papers_image_measure.png",
device = "png", width=7, height=4, units = "in")
install.packages("redist")
library(redist)
data("fl250")
class(data)
class(fl250)
library(sf)
write_sf(fl250, "/Users/christianbaehr/Desktop/fl250.geojson")
rm(fl250)
library(sf)
test=st_read("/Users/christianbaehr/Downloads/dataverse_files-11/amos_mcdonald_watkins/amos_mcdonald_watkins.shp")
summary(test$precinctid)
## working directory
setwd("/Users/christianbaehr/Documents/GitHub/POL504_precept_2023/")
## load packages
pacman::p_load(dplyr, ggplot2, gutenbergr, preText, quanteda, quanteda.corpora,
quanteda.textplots, quanteda.textstats, readtext)
## load movie reviews
reviews <- readtext("data/reviews.csv", text_field = "review") |>
corpus()
## k and b are "free" parameters
## for english, generally k ~ [30, 100] and b ~ [0.4, 0.6]
reviews.tok <- tokens(reviews, remove_punct = TRUE)
Tee <- sum(lengths(reviews.tok)) # number of tokens
reviews.dfm <- dfm(reviews.tok)
M <- nfeat(reviews.dfm)  # number of types
k <- 44
b <- 0.49
k * ( Tee^b )
M
k <- 44
b <- 0.47
k * Tee^b
## 1.2) Zipf's Law
## tells us about term frequency relative to most frequent term
## term frequency is inversely related to rank
## freq_i = ci^k
## log(freq_i) = logc + klog(i) with k ~ -1
## plot rank (x) and frequency (y)
plot(log(1:100), log(topfeatures(reviews.dfm, 100)),
xlab = "log(rank)", ylab = "log(frequency)")
## log-log regression of frequency on rank
reg <- lm(log(topfeatures(reviews.dfm, 100)) ~ log(1:100))
summary(reg)
confint(reg)
## what if we remove stopwords?
reviews.dfm.nostop <- reviews.tok %>%
dfm() %>%
dfm_remove(pattern=stopwords("english"))
reg.nostop <- lm(log(topfeatures(reviews.dfm.nostop, 100)) ~ log(1:100))
confint(reg.nostop)
par(mfrow = c(1, 2)) # visualize both
plot(log(1:100), log(topfeatures(reviews.dfm, 100)),
xlab = "log(rank)", ylab = "log(frequency)")
## add fitted line from regression to plot
abline(reg, col = "red")
## Zipfs prediction
abline(a = reg$coefficients[1], b = -1, col = "black")
plot(log(1:100), log(topfeatures(reviews.dfm.nostop, 100)),
xlab = "log(rank)", ylab = "log(frequency)")
abline(reg.nostop, col = "red")
abline(a = reg.nostop$coefficients[1], b = -1, col = "black")
## very different!!!
## dfm
reviews.dfm <- tokens(reviews, # tokenize
remove_punct = T,
remove_symbols = T,
remove_numbers = T,
remove_url = T) |> # remove punctuation/symbols/numbers/urls
tokens_remove(stopwords("en")) |> # stopwords
tokens_remove("br") |> # remove "br" (Gucci Mane is not a movie reviewer)
tokens_wordstem() |> # quanteda stemmer
dfm()
## lets focus on three reviews for simplicity
indices <- c(24, 25, 48)
as.character(reviews[indices]) # take a peek
## subset the dfm to just those three documents
reviews.3 <- dfm_subset(reviews.dfm, subset = 1:nrow(reviews.dfm) %in% indices)
## compute the COSINE similarity of the documents
textstat_simil(reviews.3, method = c("cosine")) # what do higher values mean?
## Hint: can retrieve the entire row for the 24th document in the matrix
as.matrix(reviews.dfm)[24,]
rm(list = ls())
## load speeches from Irish parliamentary budget debates
data("data_corpus_irishbudgets")
budget.dfm <- tokens(data_corpus_irishbudgets,
remove_punct = TRUE) %>% dfm()
## we'll focus only on large parties (>1 speech)
parties <- docvars(data_corpus_irishbudgets)["party"] |>
table() # number of speeches per party
largeparty <- names(parties)[parties>1] # character vector w large party names
## keep large parties
budget.lp <- corpus_subset(data_corpus_irishbudgets, party %in% largeparty)
budget.lp <- budget.lp[budget.lp != ""] # omit empty speech
## compute FRE by document
fre <- textstat_readability(budget.lp, measure = "Flesch") |>
cbind(docvars(budget.lp)["party"])
## average over FRE scores, by party
fre.party <- aggregate(fre$Flesch, by=list(fre$party), mean) |>
setNames(c("party", "fre"))
## plot point estimates
ggplot(fre.party, aes(x = party, y = fre, colour = party)) +
geom_point() +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks=seq(floor(min(fre.party$fre)),
ceiling(max(fre.party$fre)),
by = 2)) +
xlab("") + ylab("Flesch Score Point Estimates, by Party") +
theme(legend.position = "none")
## lets first break up texts by party
budget.lp.df <- data.frame(budget.lp) |>
cbind(docvars(budget.lp)["party"]) |>
setNames(c("text", "party"))
## break texts up by party (returns a list)
budget.lp.df.SPLIT <- split(budget.lp.df, f=as.factor(budget.lp.df$party))
View(budget.lp.df.SPLIT)
boot.fre <- function(party) { # accepts df of texts (party-specific)
n <- nrow(party) # number of texts
docnums <- sample(1:n, size=n, replace=T) # sample texts WITH replacement
docs.boot <- party[docnums, "text"]
docnames(docs.boot) <- 1:length(docs.boot)
fre <- textstat_readability(docs.boot, measure = "Flesch") # compute FRE for each
return(mean(fre[,"Flesch"])) # return flesch scores only
}
lapply(budget.lp.df.SPLIT, boot.fre) # apply to each df of party texts
iter <- 10
for(i in 1:iter) {
if(i==1) {boot.means <- list()} # generate new list
# store the results in new element i
boot.means[[i]] <- lapply(budget.lp.df.SPLIT, boot.fre)
print(i)
}
## combine the point estimates to a data frame and compute statistics by party
boot.means.df <- do.call(rbind.data.frame, boot.means)
View(boot.means.df)
mean.boot <- apply(boot.means.df, 2, mean)
sd.boot <- apply(boot.means.df, 2, sd)
largeparty
mean.boot
sd.boot
plot_df <- data.frame(largeparty, mean.boot, sd.boot) |>
setNames(c("party", "mean", "se"))
ci90 <- qnorm(0.95)
ci95 <- qnorm(0.975)
## ggplot point estimate + variance
ggplot(plot_df, aes(colour = party)) + # general setup for plot
geom_linerange(aes(x = party,
ymin = mean - se*ci90,
ymax = mean + se*ci90),
lwd = 1, position = position_dodge(width = 1/2)) + # plot 90% interval
geom_pointrange(aes(x = party,
y = mean,
ymin = mean - se*ci95,
ymax = mean + se*ci95),
lwd = 1/2, position = position_dodge(width = 1/2),
shape = 21, fill = "WHITE") + # plot point estimates and 95% interval
coord_flip() + # fancy stuff
theme_bw() + # fancy stuff
xlab("") + ylab("Mean Flesch Score, by Party") + # fancy stuff
theme(legend.position = "none") # fancy stuff
## what do they have by Jane Austen?
austen <- gutenberg_works() %>% filter(author == "Austen, Jane")
## download "Emma"
emma <- gutenberg_download(gutenberg_id = 158)
rm(lis)
rm(list = ls())
